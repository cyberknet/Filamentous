@page "/brands/{BrandId:guid}/productlines"

@inherits BaseListPage<IProductLineService, ProductLine, ProductLineUpsertPanel>
@using Filamentous.Web.Services
@using JumpStart.Services
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IBrandService brandService;
@*@attribute [Authorize]*@
<PageTitle>@brand?.Name Product Lines</PageTitle>

<h1>@brand?.Name Product Lines</h1>

@if (_entities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="border-top:1px solid lightgrey;margin-bottom:3em">
        <FluentToolbar Style="margin-top:0;padding-top:0">
            <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size12.Add())"
                          @onclick="@(() => OnAddEntityClick((e) => e.Name))" Title="Add a brand">Add Brand</FluentButton>
        </FluentToolbar>
    </div>

    <!-- This page is rendered in SSR mode, so the FluentDataGrid component does not offer any interactivity (like sorting). -->
    <FluentDataGrid Id="grid" TGridItem="ProductLine" Items="@_entities" GridTemplateColumns="1fr 1fr 1fr 2fr">
        <PropertyColumn Title="Name" Property="@(c => c.Name)" Align="Align.Start" />
        <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" @onclick="@(() => OnEditEntityClick(context, (e) => e.Name))" />
            <FluentDeleteButton TItem="ProductLine"
                                Item="context"
                                DataService="DataService"
                                TitleResourceKey="Components_Brands_List_DeleteTitle"
                                TextResourceKey="Components_Brands_List_DeleteText" />
        </TemplateColumn>
    </FluentDataGrid>
}

@code {
    [Parameter]
    public Guid? BrandId { get; set; }
    private Brand? brand;

    // override LoadEntities so that we only pull the ProductLine entities for the current brand
    protected override async Task LoadEntities()
    {
        if (brand == null)
        {
            if (BrandId != null)
            {
                brand = await brandService.GetAsync(BrandId.Value);
                if (brand != null)
                    _entities = brand.ProductLines.AsQueryable();
            }

            StateHasChanged();
        }
    }
}